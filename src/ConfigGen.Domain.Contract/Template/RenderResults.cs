#region Copyright and License Notice
// Copyright (C)2010-2016 - INEX Solutions Ltd
// https://github.com/inex-solutions/configgen
// 
// This file is part of ConfigGen.
// 
// ConfigGen is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// ConfigGen is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License and 
// the GNU Lesser General Public License along with ConfigGen.  
// If not, see <http://www.gnu.org/licenses/>
#endregion

using System.Collections.Generic;
using System.Linq;
using ConfigGen.Utilities;
using JetBrains.Annotations;

namespace ConfigGen.Domain.Contract.Template
{
    /// <summary>
    /// Represents the result of a <see cref="ITemplate.Render"/> operation.
    /// </summary>
    public class RenderResults
    {
        public RenderResults(
            TemplateRenderResultStatus status, //TODO: Remove
            [CanBeNull] [ItemNotNull] IReadOnlyCollection<SingleTemplateRenderResults> results, 
            [CanBeNull] [ItemNotNull] IReadOnlyCollection<Error> errors)
        {
            Results = results ?? ReadOnlyCollection.Empty<SingleTemplateRenderResults>();
            Errors = errors ?? new Error[0];

        }

        /// <summary>
        /// Gets a collection of individual render results, one for each of the configurations supplied to the <see cref="ITemplate.Render"/> 
        /// operation. 
        /// </summary>
        [NotNull]
        [ItemNotNull]
        public IReadOnlyCollection<SingleTemplateRenderResults> Results { get; }

        /// <summary>
        /// Gets a collection of errors, if any, which were generated during the <see cref="ITemplate.Render"/> operation.
        /// </summary>
        [NotNull]
        [ItemNotNull]
        public IReadOnlyCollection<Error> Errors { get; }

        /// <summary>
        /// Gets the number of results generated by the <see cref="ITemplate.Render"/> operation.
        /// </summary>
        public int Count => Results.Count();
    }
}